

import java.util.Stack;

public class Mains {

    //    String str1 = "([{}])";
    //    String str2 = "([)]";
    //    String str3 = "{()]";

        //Последовательность ([{}]) является правильной, а последовательности
        // ([)], {()] правильными не являются. Докажите это используя стек

        //Чтобы доказать правильность или неправильность последовательностей,
        // используя стек, нужно проверять каждый символ в последовательности,
        // добавляя открывающие скобки в стек и удаляя их из стека при встрече закрывающих скобок.
        // Если в процессе проверки стек окажется пустым, то последовательность правильна, в противном случае - неправильна.
        //
        //Вот пример кода на Java, который реализует эту проверку для последовательности "([{}])":
        public static boolean isBalanced (String str){


            Stack<Character> stack = new Stack<>();

            for (char c : str.toCharArray()) {
                if (c == '(' || c == '[' || c == '{') {
                    stack.push(c);
                } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(') {
                    stack.pop();
                } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {
                    stack.pop();
                } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {
                    stack.pop();
                } else {
                    return false;
                }
            }
            return stack.isEmpty();
        }



    }



        //   Как работает этот код:
     //   Создается стек stack, в который будут добавляться скобки
     //   Входная строка str проходится посимвольно, и если символ - это открывающая скобка ((, [, {), она добавляется в стек
      //  Если символ - это закрывающая скобка (), ], }), то мы проверяем, соответствует ли закрывающая скобка последней открывающей скобке в стеке. Если они не соответствуют друг другу, возвращается false, что означает, что строка неправильно сбалансирована.
       // Если в конце обхода стек оказывается пустым, то это означает, что все скобки были закрыты в правильном порядке, и строка сбалансирована.
//Данный метод принимает на вход строку с последовательностью скобок и возвращает true, если последовательность правильна, и false - в противном случае.
//
//Например, вызов isBalanced("([{}])") вернет true, а вызов isBalanced("([)]") или isBalanced("{()]") вернет false.
